/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Connect extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Connect {
        const message = new Connect({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connect();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connect {
        return Connect.deserialize(bytes);
    }
}
export class Disconnect extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Disconnect {
        const message = new Disconnect({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Disconnect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Disconnect();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Disconnect {
        return Disconnect.deserialize(bytes);
    }
}
export class Receive extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Receive {
        const message = new Receive({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Receive {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Receive();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Receive {
        return Receive.deserialize(bytes);
    }
}
export class Send extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Send {
        const message = new Send({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Send {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Send();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Send {
        return Send.deserialize(bytes);
    }
}
export class Request extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Request {
        const message = new Request({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Request {
        return Request.deserialize(bytes);
    }
}
export class ClearDesk extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ClearDesk {
        const message = new ClearDesk({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearDesk {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearDesk();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClearDesk {
        return ClearDesk.deserialize(bytes);
    }
}
export class Connection extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4]];
    constructor(data?: any[] | ({
        rating?: number;
    } & (({
        join?: Connect;
        disconnect?: never;
    } | {
        join?: never;
        disconnect?: Disconnect;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rating" in data && data.rating != undefined) {
                this.rating = data.rating;
            }
            if ("join" in data && data.join != undefined) {
                this.join = data.join;
            }
            if ("disconnect" in data && data.disconnect != undefined) {
                this.disconnect = data.disconnect;
            }
        }
    }
    get rating() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rating(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get join() {
        return pb_1.Message.getWrapperField(this, Connect, 3) as Connect;
    }
    set join(value: Connect) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_join() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get disconnect() {
        return pb_1.Message.getWrapperField(this, Disconnect, 4) as Disconnect;
    }
    set disconnect(value: Disconnect) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_disconnect() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "join" | "disconnect";
        } = {
            0: "none",
            3: "join",
            4: "disconnect"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
    }
    static fromObject(data: {
        rating?: number;
        join?: ReturnType<typeof Connect.prototype.toObject>;
        disconnect?: ReturnType<typeof Disconnect.prototype.toObject>;
    }): Connection {
        const message = new Connection({});
        if (data.rating != null) {
            message.rating = data.rating;
        }
        if (data.join != null) {
            message.join = Connect.fromObject(data.join);
        }
        if (data.disconnect != null) {
            message.disconnect = Disconnect.fromObject(data.disconnect);
        }
        return message;
    }
    toObject() {
        const data: {
            rating?: number;
            join?: ReturnType<typeof Connect.prototype.toObject>;
            disconnect?: ReturnType<typeof Disconnect.prototype.toObject>;
        } = {};
        if (this.rating != null) {
            data.rating = this.rating;
        }
        if (this.join != null) {
            data.join = this.join.toObject();
        }
        if (this.disconnect != null) {
            data.disconnect = this.disconnect.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.rating != 0)
            writer.writeInt32(2, this.rating);
        if (this.has_join)
            writer.writeMessage(3, this.join, () => this.join.serialize(writer));
        if (this.has_disconnect)
            writer.writeMessage(4, this.disconnect, () => this.disconnect.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.rating = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.join, () => message.join = Connect.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.disconnect, () => message.disconnect = Disconnect.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connection {
        return Connection.deserialize(bytes);
    }
}
export class Licitiranje extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        type?: number;
    }): Licitiranje {
        const message = new Licitiranje({});
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != 0)
            writer.writeInt32(1, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Licitiranje {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Licitiranje();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Licitiranje {
        return Licitiranje.deserialize(bytes);
    }
}
export class LicitiranjeStart extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LicitiranjeStart {
        const message = new LicitiranjeStart({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LicitiranjeStart {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LicitiranjeStart();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LicitiranjeStart {
        return LicitiranjeStart.deserialize(bytes);
    }
}
export class Card extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4]];
    constructor(data?: any[] | ({
        id?: string;
    } & (({
        receive?: Receive;
        send?: never;
        request?: never;
    } | {
        receive?: never;
        send?: Send;
        request?: never;
    } | {
        receive?: never;
        send?: never;
        request?: Request;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("receive" in data && data.receive != undefined) {
                this.receive = data.receive;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get receive() {
        return pb_1.Message.getWrapperField(this, Receive, 2) as Receive;
    }
    set receive(value: Receive) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_receive() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 3) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 4) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "receive" | "send" | "request";
        } = {
            0: "none",
            2: "receive",
            3: "send",
            4: "request"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
    }
    static fromObject(data: {
        id?: string;
        receive?: ReturnType<typeof Receive.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
        request?: ReturnType<typeof Request.prototype.toObject>;
    }): Card {
        const message = new Card({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.receive != null) {
            message.receive = Receive.fromObject(data.receive);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            receive?: ReturnType<typeof Receive.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
            request?: ReturnType<typeof Request.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.receive != null) {
            data.receive = this.receive.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_receive)
            writer.writeMessage(2, this.receive, () => this.receive.serialize(writer));
        if (this.has_send)
            writer.writeMessage(3, this.send, () => this.send.serialize(writer));
        if (this.has_request)
            writer.writeMessage(4, this.request, () => this.request.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Card {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Card();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.receive, () => message.receive = Receive.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Card {
        return Card.deserialize(bytes);
    }
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        position?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        position?: number;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            position?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.position != 0)
            writer.writeInt32(3, this.position);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.position = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class ResultsUser extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User;
        points?: number;
        playing?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("points" in data && data.points != undefined) {
                this.points = data.points;
            }
            if ("playing" in data && data.playing != undefined) {
                this.playing = data.playing;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get points() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set points(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get playing() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set playing(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>;
        points?: number;
        playing?: boolean;
    }): ResultsUser {
        const message = new ResultsUser({});
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        if (data.points != null) {
            message.points = data.points;
        }
        if (data.playing != null) {
            message.playing = data.playing;
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            points?: number;
            playing?: boolean;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.points != null) {
            data.points = this.points;
        }
        if (this.playing != null) {
            data.playing = this.playing;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (this.points != 0)
            writer.writeInt32(2, this.points);
        if (this.playing != false)
            writer.writeBool(3, this.playing);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResultsUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResultsUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                case 2:
                    message.points = reader.readInt32();
                    break;
                case 3:
                    message.playing = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResultsUser {
        return ResultsUser.deserialize(bytes);
    }
}
export class Results extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: ResultsUser[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, ResultsUser, 1) as ResultsUser[];
    }
    set user(value: ResultsUser[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof ResultsUser.prototype.toObject>[];
    }): Results {
        const message = new Results({});
        if (data.user != null) {
            message.user = data.user.map(item => ResultsUser.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof ResultsUser.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: ResultsUser) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: ResultsUser) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Results {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Results();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ResultsUser.deserialize(reader), ResultsUser));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Results {
        return Results.deserialize(bytes);
    }
}
export class GameStart extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set user(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>[];
    }): GameStart {
        const message = new GameStart({});
        if (data.user != null) {
            message.user = data.user.map(item => User.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: User) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: User) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameStart {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameStart();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameStart {
        return GameStart.deserialize(bytes);
    }
}
export class UserList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set user(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>[];
    }): UserList {
        const message = new UserList({});
        if (data.user != null) {
            message.user = data.user.map(item => User.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: User) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: User) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserList {
        return UserList.deserialize(bytes);
    }
}
export class KingSelection extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3]];
    constructor(data?: any[] | ({
        card?: string;
    } & (({
        request?: Request;
        send?: never;
    } | {
        request?: never;
        send?: Send;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
        }
    }
    get card() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set card(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 2) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 3) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "request" | "send";
        } = {
            0: "none",
            2: "request",
            3: "send"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
    }
    static fromObject(data: {
        card?: string;
        request?: ReturnType<typeof Request.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
    }): KingSelection {
        const message = new KingSelection({});
        if (data.card != null) {
            message.card = data.card;
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        return message;
    }
    toObject() {
        const data: {
            card?: string;
            request?: ReturnType<typeof Request.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
        } = {};
        if (this.card != null) {
            data.card = this.card;
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.card.length)
            writer.writeString(1, this.card);
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (this.has_send)
            writer.writeMessage(3, this.send, () => this.send.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KingSelection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KingSelection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.card = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KingSelection {
        return KingSelection.deserialize(bytes);
    }
}
export class StartPredictions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        current_predictions?: Predictions;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("current_predictions" in data && data.current_predictions != undefined) {
                this.current_predictions = data.current_predictions;
            }
        }
    }
    get current_predictions() {
        return pb_1.Message.getWrapperField(this, Predictions, 1) as Predictions;
    }
    set current_predictions(value: Predictions) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_current_predictions() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        current_predictions?: ReturnType<typeof Predictions.prototype.toObject>;
    }): StartPredictions {
        const message = new StartPredictions({});
        if (data.current_predictions != null) {
            message.current_predictions = Predictions.fromObject(data.current_predictions);
        }
        return message;
    }
    toObject() {
        const data: {
            current_predictions?: ReturnType<typeof Predictions.prototype.toObject>;
        } = {};
        if (this.current_predictions != null) {
            data.current_predictions = this.current_predictions.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_current_predictions)
            writer.writeMessage(1, this.current_predictions, () => this.current_predictions.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartPredictions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartPredictions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.current_predictions, () => message.current_predictions = Predictions.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StartPredictions {
        return StartPredictions.deserialize(bytes);
    }
}
export class Predictions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        kralj_ultimo?: User;
        kralj_ultimo_kontra?: number;
        kralj_ultimo_kontra_dal?: User;
        trula?: User;
        trula_kontra?: number;
        trula_kontra_dal?: User;
        kralji?: User;
        kralji_kontra?: number;
        kralji_kontra_dal?: User;
        pagat_ultimo?: User;
        pagat_ultimo_kontra?: number;
        pagat_ultimo_kontra_dal?: User;
        igra?: User[];
        igra_kontra?: number;
        igra_kontra_dal?: User;
        valat?: User;
        valat_kontra?: number;
        valat_kontra_dal?: User;
        barvni_valat?: User;
        barvni_valat_kontra?: number;
        barvni_valat_kontra_dal?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("kralj_ultimo" in data && data.kralj_ultimo != undefined) {
                this.kralj_ultimo = data.kralj_ultimo;
            }
            if ("kralj_ultimo_kontra" in data && data.kralj_ultimo_kontra != undefined) {
                this.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
            }
            if ("kralj_ultimo_kontra_dal" in data && data.kralj_ultimo_kontra_dal != undefined) {
                this.kralj_ultimo_kontra_dal = data.kralj_ultimo_kontra_dal;
            }
            if ("trula" in data && data.trula != undefined) {
                this.trula = data.trula;
            }
            if ("trula_kontra" in data && data.trula_kontra != undefined) {
                this.trula_kontra = data.trula_kontra;
            }
            if ("trula_kontra_dal" in data && data.trula_kontra_dal != undefined) {
                this.trula_kontra_dal = data.trula_kontra_dal;
            }
            if ("kralji" in data && data.kralji != undefined) {
                this.kralji = data.kralji;
            }
            if ("kralji_kontra" in data && data.kralji_kontra != undefined) {
                this.kralji_kontra = data.kralji_kontra;
            }
            if ("kralji_kontra_dal" in data && data.kralji_kontra_dal != undefined) {
                this.kralji_kontra_dal = data.kralji_kontra_dal;
            }
            if ("pagat_ultimo" in data && data.pagat_ultimo != undefined) {
                this.pagat_ultimo = data.pagat_ultimo;
            }
            if ("pagat_ultimo_kontra" in data && data.pagat_ultimo_kontra != undefined) {
                this.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
            }
            if ("pagat_ultimo_kontra_dal" in data && data.pagat_ultimo_kontra_dal != undefined) {
                this.pagat_ultimo_kontra_dal = data.pagat_ultimo_kontra_dal;
            }
            if ("igra" in data && data.igra != undefined) {
                this.igra = data.igra;
            }
            if ("igra_kontra" in data && data.igra_kontra != undefined) {
                this.igra_kontra = data.igra_kontra;
            }
            if ("igra_kontra_dal" in data && data.igra_kontra_dal != undefined) {
                this.igra_kontra_dal = data.igra_kontra_dal;
            }
            if ("valat" in data && data.valat != undefined) {
                this.valat = data.valat;
            }
            if ("valat_kontra" in data && data.valat_kontra != undefined) {
                this.valat_kontra = data.valat_kontra;
            }
            if ("valat_kontra_dal" in data && data.valat_kontra_dal != undefined) {
                this.valat_kontra_dal = data.valat_kontra_dal;
            }
            if ("barvni_valat" in data && data.barvni_valat != undefined) {
                this.barvni_valat = data.barvni_valat;
            }
            if ("barvni_valat_kontra" in data && data.barvni_valat_kontra != undefined) {
                this.barvni_valat_kontra = data.barvni_valat_kontra;
            }
            if ("barvni_valat_kontra_dal" in data && data.barvni_valat_kontra_dal != undefined) {
                this.barvni_valat_kontra_dal = data.barvni_valat_kontra_dal;
            }
        }
    }
    get kralj_ultimo() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set kralj_ultimo(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_kralj_ultimo() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get kralj_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set kralj_ultimo_kontra(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get kralj_ultimo_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 3) as User;
    }
    set kralj_ultimo_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_kralj_ultimo_kontra_dal() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get trula() {
        return pb_1.Message.getWrapperField(this, User, 4) as User;
    }
    set trula(value: User) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_trula() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get trula_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set trula_kontra(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get trula_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 6) as User;
    }
    set trula_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_trula_kontra_dal() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get kralji() {
        return pb_1.Message.getWrapperField(this, User, 7) as User;
    }
    set kralji(value: User) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_kralji() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get kralji_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set kralji_kontra(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get kralji_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 9) as User;
    }
    set kralji_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_kralji_kontra_dal() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get pagat_ultimo() {
        return pb_1.Message.getWrapperField(this, User, 10) as User;
    }
    set pagat_ultimo(value: User) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_pagat_ultimo() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get pagat_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set pagat_ultimo_kontra(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get pagat_ultimo_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 12) as User;
    }
    set pagat_ultimo_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_pagat_ultimo_kontra_dal() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get igra() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 13) as User[];
    }
    set igra(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get igra_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set igra_kontra(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get igra_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 15) as User;
    }
    set igra_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_igra_kontra_dal() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get valat() {
        return pb_1.Message.getWrapperField(this, User, 16) as User;
    }
    set valat(value: User) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_valat() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set valat_kontra(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get valat_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 18) as User;
    }
    set valat_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get has_valat_kontra_dal() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get barvni_valat() {
        return pb_1.Message.getWrapperField(this, User, 19) as User;
    }
    set barvni_valat(value: User) {
        pb_1.Message.setWrapperField(this, 19, value);
    }
    get has_barvni_valat() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get barvni_valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set barvni_valat_kontra(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get barvni_valat_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 21) as User;
    }
    set barvni_valat_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 21, value);
    }
    get has_barvni_valat_kontra_dal() {
        return pb_1.Message.getField(this, 21) != null;
    }
    static fromObject(data: {
        kralj_ultimo?: ReturnType<typeof User.prototype.toObject>;
        kralj_ultimo_kontra?: number;
        kralj_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        trula?: ReturnType<typeof User.prototype.toObject>;
        trula_kontra?: number;
        trula_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        kralji?: ReturnType<typeof User.prototype.toObject>;
        kralji_kontra?: number;
        kralji_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        pagat_ultimo?: ReturnType<typeof User.prototype.toObject>;
        pagat_ultimo_kontra?: number;
        pagat_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        igra?: ReturnType<typeof User.prototype.toObject>[];
        igra_kontra?: number;
        igra_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        valat?: ReturnType<typeof User.prototype.toObject>;
        valat_kontra?: number;
        valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        barvni_valat?: ReturnType<typeof User.prototype.toObject>;
        barvni_valat_kontra?: number;
        barvni_valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
    }): Predictions {
        const message = new Predictions({});
        if (data.kralj_ultimo != null) {
            message.kralj_ultimo = User.fromObject(data.kralj_ultimo);
        }
        if (data.kralj_ultimo_kontra != null) {
            message.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
        }
        if (data.kralj_ultimo_kontra_dal != null) {
            message.kralj_ultimo_kontra_dal = User.fromObject(data.kralj_ultimo_kontra_dal);
        }
        if (data.trula != null) {
            message.trula = User.fromObject(data.trula);
        }
        if (data.trula_kontra != null) {
            message.trula_kontra = data.trula_kontra;
        }
        if (data.trula_kontra_dal != null) {
            message.trula_kontra_dal = User.fromObject(data.trula_kontra_dal);
        }
        if (data.kralji != null) {
            message.kralji = User.fromObject(data.kralji);
        }
        if (data.kralji_kontra != null) {
            message.kralji_kontra = data.kralji_kontra;
        }
        if (data.kralji_kontra_dal != null) {
            message.kralji_kontra_dal = User.fromObject(data.kralji_kontra_dal);
        }
        if (data.pagat_ultimo != null) {
            message.pagat_ultimo = User.fromObject(data.pagat_ultimo);
        }
        if (data.pagat_ultimo_kontra != null) {
            message.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
        }
        if (data.pagat_ultimo_kontra_dal != null) {
            message.pagat_ultimo_kontra_dal = User.fromObject(data.pagat_ultimo_kontra_dal);
        }
        if (data.igra != null) {
            message.igra = data.igra.map(item => User.fromObject(item));
        }
        if (data.igra_kontra != null) {
            message.igra_kontra = data.igra_kontra;
        }
        if (data.igra_kontra_dal != null) {
            message.igra_kontra_dal = User.fromObject(data.igra_kontra_dal);
        }
        if (data.valat != null) {
            message.valat = User.fromObject(data.valat);
        }
        if (data.valat_kontra != null) {
            message.valat_kontra = data.valat_kontra;
        }
        if (data.valat_kontra_dal != null) {
            message.valat_kontra_dal = User.fromObject(data.valat_kontra_dal);
        }
        if (data.barvni_valat != null) {
            message.barvni_valat = User.fromObject(data.barvni_valat);
        }
        if (data.barvni_valat_kontra != null) {
            message.barvni_valat_kontra = data.barvni_valat_kontra;
        }
        if (data.barvni_valat_kontra_dal != null) {
            message.barvni_valat_kontra_dal = User.fromObject(data.barvni_valat_kontra_dal);
        }
        return message;
    }
    toObject() {
        const data: {
            kralj_ultimo?: ReturnType<typeof User.prototype.toObject>;
            kralj_ultimo_kontra?: number;
            kralj_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            trula?: ReturnType<typeof User.prototype.toObject>;
            trula_kontra?: number;
            trula_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            kralji?: ReturnType<typeof User.prototype.toObject>;
            kralji_kontra?: number;
            kralji_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            pagat_ultimo?: ReturnType<typeof User.prototype.toObject>;
            pagat_ultimo_kontra?: number;
            pagat_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            igra?: ReturnType<typeof User.prototype.toObject>[];
            igra_kontra?: number;
            igra_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            valat?: ReturnType<typeof User.prototype.toObject>;
            valat_kontra?: number;
            valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            barvni_valat?: ReturnType<typeof User.prototype.toObject>;
            barvni_valat_kontra?: number;
            barvni_valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.kralj_ultimo != null) {
            data.kralj_ultimo = this.kralj_ultimo.toObject();
        }
        if (this.kralj_ultimo_kontra != null) {
            data.kralj_ultimo_kontra = this.kralj_ultimo_kontra;
        }
        if (this.kralj_ultimo_kontra_dal != null) {
            data.kralj_ultimo_kontra_dal = this.kralj_ultimo_kontra_dal.toObject();
        }
        if (this.trula != null) {
            data.trula = this.trula.toObject();
        }
        if (this.trula_kontra != null) {
            data.trula_kontra = this.trula_kontra;
        }
        if (this.trula_kontra_dal != null) {
            data.trula_kontra_dal = this.trula_kontra_dal.toObject();
        }
        if (this.kralji != null) {
            data.kralji = this.kralji.toObject();
        }
        if (this.kralji_kontra != null) {
            data.kralji_kontra = this.kralji_kontra;
        }
        if (this.kralji_kontra_dal != null) {
            data.kralji_kontra_dal = this.kralji_kontra_dal.toObject();
        }
        if (this.pagat_ultimo != null) {
            data.pagat_ultimo = this.pagat_ultimo.toObject();
        }
        if (this.pagat_ultimo_kontra != null) {
            data.pagat_ultimo_kontra = this.pagat_ultimo_kontra;
        }
        if (this.pagat_ultimo_kontra_dal != null) {
            data.pagat_ultimo_kontra_dal = this.pagat_ultimo_kontra_dal.toObject();
        }
        if (this.igra != null) {
            data.igra = this.igra.map((item: User) => item.toObject());
        }
        if (this.igra_kontra != null) {
            data.igra_kontra = this.igra_kontra;
        }
        if (this.igra_kontra_dal != null) {
            data.igra_kontra_dal = this.igra_kontra_dal.toObject();
        }
        if (this.valat != null) {
            data.valat = this.valat.toObject();
        }
        if (this.valat_kontra != null) {
            data.valat_kontra = this.valat_kontra;
        }
        if (this.valat_kontra_dal != null) {
            data.valat_kontra_dal = this.valat_kontra_dal.toObject();
        }
        if (this.barvni_valat != null) {
            data.barvni_valat = this.barvni_valat.toObject();
        }
        if (this.barvni_valat_kontra != null) {
            data.barvni_valat_kontra = this.barvni_valat_kontra;
        }
        if (this.barvni_valat_kontra_dal != null) {
            data.barvni_valat_kontra_dal = this.barvni_valat_kontra_dal.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_kralj_ultimo)
            writer.writeMessage(1, this.kralj_ultimo, () => this.kralj_ultimo.serialize(writer));
        if (this.kralj_ultimo_kontra != 0)
            writer.writeInt32(2, this.kralj_ultimo_kontra);
        if (this.has_kralj_ultimo_kontra_dal)
            writer.writeMessage(3, this.kralj_ultimo_kontra_dal, () => this.kralj_ultimo_kontra_dal.serialize(writer));
        if (this.has_trula)
            writer.writeMessage(4, this.trula, () => this.trula.serialize(writer));
        if (this.trula_kontra != 0)
            writer.writeInt32(5, this.trula_kontra);
        if (this.has_trula_kontra_dal)
            writer.writeMessage(6, this.trula_kontra_dal, () => this.trula_kontra_dal.serialize(writer));
        if (this.has_kralji)
            writer.writeMessage(7, this.kralji, () => this.kralji.serialize(writer));
        if (this.kralji_kontra != 0)
            writer.writeInt32(8, this.kralji_kontra);
        if (this.has_kralji_kontra_dal)
            writer.writeMessage(9, this.kralji_kontra_dal, () => this.kralji_kontra_dal.serialize(writer));
        if (this.has_pagat_ultimo)
            writer.writeMessage(10, this.pagat_ultimo, () => this.pagat_ultimo.serialize(writer));
        if (this.pagat_ultimo_kontra != 0)
            writer.writeInt32(11, this.pagat_ultimo_kontra);
        if (this.has_pagat_ultimo_kontra_dal)
            writer.writeMessage(12, this.pagat_ultimo_kontra_dal, () => this.pagat_ultimo_kontra_dal.serialize(writer));
        if (this.igra.length)
            writer.writeRepeatedMessage(13, this.igra, (item: User) => item.serialize(writer));
        if (this.igra_kontra != 0)
            writer.writeInt32(14, this.igra_kontra);
        if (this.has_igra_kontra_dal)
            writer.writeMessage(15, this.igra_kontra_dal, () => this.igra_kontra_dal.serialize(writer));
        if (this.has_valat)
            writer.writeMessage(16, this.valat, () => this.valat.serialize(writer));
        if (this.valat_kontra != 0)
            writer.writeInt32(17, this.valat_kontra);
        if (this.has_valat_kontra_dal)
            writer.writeMessage(18, this.valat_kontra_dal, () => this.valat_kontra_dal.serialize(writer));
        if (this.has_barvni_valat)
            writer.writeMessage(19, this.barvni_valat, () => this.barvni_valat.serialize(writer));
        if (this.barvni_valat_kontra != 0)
            writer.writeInt32(20, this.barvni_valat_kontra);
        if (this.has_barvni_valat_kontra_dal)
            writer.writeMessage(21, this.barvni_valat_kontra_dal, () => this.barvni_valat_kontra_dal.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Predictions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Predictions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.kralj_ultimo, () => message.kralj_ultimo = User.deserialize(reader));
                    break;
                case 2:
                    message.kralj_ultimo_kontra = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.kralj_ultimo_kontra_dal, () => message.kralj_ultimo_kontra_dal = User.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.trula, () => message.trula = User.deserialize(reader));
                    break;
                case 5:
                    message.trula_kontra = reader.readInt32();
                    break;
                case 6:
                    reader.readMessage(message.trula_kontra_dal, () => message.trula_kontra_dal = User.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.kralji, () => message.kralji = User.deserialize(reader));
                    break;
                case 8:
                    message.kralji_kontra = reader.readInt32();
                    break;
                case 9:
                    reader.readMessage(message.kralji_kontra_dal, () => message.kralji_kontra_dal = User.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.pagat_ultimo, () => message.pagat_ultimo = User.deserialize(reader));
                    break;
                case 11:
                    message.pagat_ultimo_kontra = reader.readInt32();
                    break;
                case 12:
                    reader.readMessage(message.pagat_ultimo_kontra_dal, () => message.pagat_ultimo_kontra_dal = User.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.igra, () => pb_1.Message.addToRepeatedWrapperField(message, 13, User.deserialize(reader), User));
                    break;
                case 14:
                    message.igra_kontra = reader.readInt32();
                    break;
                case 15:
                    reader.readMessage(message.igra_kontra_dal, () => message.igra_kontra_dal = User.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.valat, () => message.valat = User.deserialize(reader));
                    break;
                case 17:
                    message.valat_kontra = reader.readInt32();
                    break;
                case 18:
                    reader.readMessage(message.valat_kontra_dal, () => message.valat_kontra_dal = User.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.barvni_valat, () => message.barvni_valat = User.deserialize(reader));
                    break;
                case 20:
                    message.barvni_valat_kontra = reader.readInt32();
                    break;
                case 21:
                    reader.readMessage(message.barvni_valat_kontra_dal, () => message.barvni_valat_kontra_dal = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Predictions {
        return Predictions.deserialize(bytes);
    }
}
export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LoginRequest {
        const message = new LoginRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
        return LoginRequest.deserialize(bytes);
    }
}
export class LoginInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): LoginInfo {
        const message = new LoginInfo({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginInfo {
        return LoginInfo.deserialize(bytes);
    }
}
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: LoginResponse.OK;
        fail?: never;
    } | {
        ok?: never;
        fail?: LoginResponse.Fail;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("fail" in data && data.fail != undefined) {
                this.fail = data.fail;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, LoginResponse.OK, 1) as LoginResponse.OK;
    }
    set ok(value: LoginResponse.OK) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_ok() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get fail() {
        return pb_1.Message.getWrapperField(this, LoginResponse.Fail, 2) as LoginResponse.Fail;
    }
    set fail(value: LoginResponse.Fail) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_fail() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "ok" | "fail";
        } = {
            0: "none",
            1: "ok",
            2: "fail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof LoginResponse.OK.prototype.toObject>;
        fail?: ReturnType<typeof LoginResponse.Fail.prototype.toObject>;
    }): LoginResponse {
        const message = new LoginResponse({});
        if (data.ok != null) {
            message.ok = LoginResponse.OK.fromObject(data.ok);
        }
        if (data.fail != null) {
            message.fail = LoginResponse.Fail.fromObject(data.fail);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof LoginResponse.OK.prototype.toObject>;
            fail?: ReturnType<typeof LoginResponse.Fail.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.fail != null) {
            data.fail = this.fail.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_ok)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.has_fail)
            writer.writeMessage(2, this.fail, () => this.fail.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = LoginResponse.OK.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.fail, () => message.fail = LoginResponse.Fail.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
export namespace LoginResponse {
    export class OK extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): OK {
            const message = new OK({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OK {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OK();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OK {
            return OK.deserialize(bytes);
        }
    }
    export class Fail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Fail {
            const message = new Fail({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fail {
            return Fail.deserialize(bytes);
        }
    }
}
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]];
    constructor(data?: any[] | ({
        username?: string;
        player_id?: string;
        game_id?: string;
    } & (({
        connection?: Connection;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: Licitiranje;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: Card;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: LicitiranjeStart;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: GameStart;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: LoginRequest;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: LoginInfo;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: LoginResponse;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: ClearDesk;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: Results;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: UserList;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: KingSelection;
        start_predictions?: never;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: StartPredictions;
        predictions?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: Predictions;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("player_id" in data && data.player_id != undefined) {
                this.player_id = data.player_id;
            }
            if ("game_id" in data && data.game_id != undefined) {
                this.game_id = data.game_id;
            }
            if ("connection" in data && data.connection != undefined) {
                this.connection = data.connection;
            }
            if ("licitiranje" in data && data.licitiranje != undefined) {
                this.licitiranje = data.licitiranje;
            }
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("licitiranje_start" in data && data.licitiranje_start != undefined) {
                this.licitiranje_start = data.licitiranje_start;
            }
            if ("game_start" in data && data.game_start != undefined) {
                this.game_start = data.game_start;
            }
            if ("login_request" in data && data.login_request != undefined) {
                this.login_request = data.login_request;
            }
            if ("login_info" in data && data.login_info != undefined) {
                this.login_info = data.login_info;
            }
            if ("login_response" in data && data.login_response != undefined) {
                this.login_response = data.login_response;
            }
            if ("clear_desk" in data && data.clear_desk != undefined) {
                this.clear_desk = data.clear_desk;
            }
            if ("results" in data && data.results != undefined) {
                this.results = data.results;
            }
            if ("user_list" in data && data.user_list != undefined) {
                this.user_list = data.user_list;
            }
            if ("king_selection" in data && data.king_selection != undefined) {
                this.king_selection = data.king_selection;
            }
            if ("start_predictions" in data && data.start_predictions != undefined) {
                this.start_predictions = data.start_predictions;
            }
            if ("predictions" in data && data.predictions != undefined) {
                this.predictions = data.predictions;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get player_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set player_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get game_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set game_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get connection() {
        return pb_1.Message.getWrapperField(this, Connection, 4) as Connection;
    }
    set connection(value: Connection) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_connection() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get licitiranje() {
        return pb_1.Message.getWrapperField(this, Licitiranje, 5) as Licitiranje;
    }
    set licitiranje(value: Licitiranje) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_licitiranje() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get card() {
        return pb_1.Message.getWrapperField(this, Card, 6) as Card;
    }
    set card(value: Card) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_card() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get licitiranje_start() {
        return pb_1.Message.getWrapperField(this, LicitiranjeStart, 7) as LicitiranjeStart;
    }
    set licitiranje_start(value: LicitiranjeStart) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_licitiranje_start() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get game_start() {
        return pb_1.Message.getWrapperField(this, GameStart, 8) as GameStart;
    }
    set game_start(value: GameStart) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get has_game_start() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get login_request() {
        return pb_1.Message.getWrapperField(this, LoginRequest, 9) as LoginRequest;
    }
    set login_request(value: LoginRequest) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get has_login_request() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get login_info() {
        return pb_1.Message.getWrapperField(this, LoginInfo, 10) as LoginInfo;
    }
    set login_info(value: LoginInfo) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get has_login_info() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get login_response() {
        return pb_1.Message.getWrapperField(this, LoginResponse, 11) as LoginResponse;
    }
    set login_response(value: LoginResponse) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_login_response() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get clear_desk() {
        return pb_1.Message.getWrapperField(this, ClearDesk, 12) as ClearDesk;
    }
    set clear_desk(value: ClearDesk) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get has_clear_desk() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get results() {
        return pb_1.Message.getWrapperField(this, Results, 13) as Results;
    }
    set results(value: Results) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get has_results() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get user_list() {
        return pb_1.Message.getWrapperField(this, UserList, 14) as UserList;
    }
    set user_list(value: UserList) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get has_user_list() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get king_selection() {
        return pb_1.Message.getWrapperField(this, KingSelection, 15) as KingSelection;
    }
    set king_selection(value: KingSelection) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get has_king_selection() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get start_predictions() {
        return pb_1.Message.getWrapperField(this, StartPredictions, 16) as StartPredictions;
    }
    set start_predictions(value: StartPredictions) {
        pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
    }
    get has_start_predictions() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get predictions() {
        return pb_1.Message.getWrapperField(this, Predictions, 17) as Predictions;
    }
    set predictions(value: Predictions) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get has_predictions() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get data() {
        const cases: {
            [index: number]: "none" | "connection" | "licitiranje" | "card" | "licitiranje_start" | "game_start" | "login_request" | "login_info" | "login_response" | "clear_desk" | "results" | "user_list" | "king_selection" | "start_predictions" | "predictions";
        } = {
            0: "none",
            4: "connection",
            5: "licitiranje",
            6: "card",
            7: "licitiranje_start",
            8: "game_start",
            9: "login_request",
            10: "login_info",
            11: "login_response",
            12: "clear_desk",
            13: "results",
            14: "user_list",
            15: "king_selection",
            16: "start_predictions",
            17: "predictions"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])];
    }
    static fromObject(data: {
        username?: string;
        player_id?: string;
        game_id?: string;
        connection?: ReturnType<typeof Connection.prototype.toObject>;
        licitiranje?: ReturnType<typeof Licitiranje.prototype.toObject>;
        card?: ReturnType<typeof Card.prototype.toObject>;
        licitiranje_start?: ReturnType<typeof LicitiranjeStart.prototype.toObject>;
        game_start?: ReturnType<typeof GameStart.prototype.toObject>;
        login_request?: ReturnType<typeof LoginRequest.prototype.toObject>;
        login_info?: ReturnType<typeof LoginInfo.prototype.toObject>;
        login_response?: ReturnType<typeof LoginResponse.prototype.toObject>;
        clear_desk?: ReturnType<typeof ClearDesk.prototype.toObject>;
        results?: ReturnType<typeof Results.prototype.toObject>;
        user_list?: ReturnType<typeof UserList.prototype.toObject>;
        king_selection?: ReturnType<typeof KingSelection.prototype.toObject>;
        start_predictions?: ReturnType<typeof StartPredictions.prototype.toObject>;
        predictions?: ReturnType<typeof Predictions.prototype.toObject>;
    }): Message {
        const message = new Message({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.player_id != null) {
            message.player_id = data.player_id;
        }
        if (data.game_id != null) {
            message.game_id = data.game_id;
        }
        if (data.connection != null) {
            message.connection = Connection.fromObject(data.connection);
        }
        if (data.licitiranje != null) {
            message.licitiranje = Licitiranje.fromObject(data.licitiranje);
        }
        if (data.card != null) {
            message.card = Card.fromObject(data.card);
        }
        if (data.licitiranje_start != null) {
            message.licitiranje_start = LicitiranjeStart.fromObject(data.licitiranje_start);
        }
        if (data.game_start != null) {
            message.game_start = GameStart.fromObject(data.game_start);
        }
        if (data.login_request != null) {
            message.login_request = LoginRequest.fromObject(data.login_request);
        }
        if (data.login_info != null) {
            message.login_info = LoginInfo.fromObject(data.login_info);
        }
        if (data.login_response != null) {
            message.login_response = LoginResponse.fromObject(data.login_response);
        }
        if (data.clear_desk != null) {
            message.clear_desk = ClearDesk.fromObject(data.clear_desk);
        }
        if (data.results != null) {
            message.results = Results.fromObject(data.results);
        }
        if (data.user_list != null) {
            message.user_list = UserList.fromObject(data.user_list);
        }
        if (data.king_selection != null) {
            message.king_selection = KingSelection.fromObject(data.king_selection);
        }
        if (data.start_predictions != null) {
            message.start_predictions = StartPredictions.fromObject(data.start_predictions);
        }
        if (data.predictions != null) {
            message.predictions = Predictions.fromObject(data.predictions);
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            player_id?: string;
            game_id?: string;
            connection?: ReturnType<typeof Connection.prototype.toObject>;
            licitiranje?: ReturnType<typeof Licitiranje.prototype.toObject>;
            card?: ReturnType<typeof Card.prototype.toObject>;
            licitiranje_start?: ReturnType<typeof LicitiranjeStart.prototype.toObject>;
            game_start?: ReturnType<typeof GameStart.prototype.toObject>;
            login_request?: ReturnType<typeof LoginRequest.prototype.toObject>;
            login_info?: ReturnType<typeof LoginInfo.prototype.toObject>;
            login_response?: ReturnType<typeof LoginResponse.prototype.toObject>;
            clear_desk?: ReturnType<typeof ClearDesk.prototype.toObject>;
            results?: ReturnType<typeof Results.prototype.toObject>;
            user_list?: ReturnType<typeof UserList.prototype.toObject>;
            king_selection?: ReturnType<typeof KingSelection.prototype.toObject>;
            start_predictions?: ReturnType<typeof StartPredictions.prototype.toObject>;
            predictions?: ReturnType<typeof Predictions.prototype.toObject>;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.player_id != null) {
            data.player_id = this.player_id;
        }
        if (this.game_id != null) {
            data.game_id = this.game_id;
        }
        if (this.connection != null) {
            data.connection = this.connection.toObject();
        }
        if (this.licitiranje != null) {
            data.licitiranje = this.licitiranje.toObject();
        }
        if (this.card != null) {
            data.card = this.card.toObject();
        }
        if (this.licitiranje_start != null) {
            data.licitiranje_start = this.licitiranje_start.toObject();
        }
        if (this.game_start != null) {
            data.game_start = this.game_start.toObject();
        }
        if (this.login_request != null) {
            data.login_request = this.login_request.toObject();
        }
        if (this.login_info != null) {
            data.login_info = this.login_info.toObject();
        }
        if (this.login_response != null) {
            data.login_response = this.login_response.toObject();
        }
        if (this.clear_desk != null) {
            data.clear_desk = this.clear_desk.toObject();
        }
        if (this.results != null) {
            data.results = this.results.toObject();
        }
        if (this.user_list != null) {
            data.user_list = this.user_list.toObject();
        }
        if (this.king_selection != null) {
            data.king_selection = this.king_selection.toObject();
        }
        if (this.start_predictions != null) {
            data.start_predictions = this.start_predictions.toObject();
        }
        if (this.predictions != null) {
            data.predictions = this.predictions.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.player_id.length)
            writer.writeString(2, this.player_id);
        if (this.game_id.length)
            writer.writeString(3, this.game_id);
        if (this.has_connection)
            writer.writeMessage(4, this.connection, () => this.connection.serialize(writer));
        if (this.has_licitiranje)
            writer.writeMessage(5, this.licitiranje, () => this.licitiranje.serialize(writer));
        if (this.has_card)
            writer.writeMessage(6, this.card, () => this.card.serialize(writer));
        if (this.has_licitiranje_start)
            writer.writeMessage(7, this.licitiranje_start, () => this.licitiranje_start.serialize(writer));
        if (this.has_game_start)
            writer.writeMessage(8, this.game_start, () => this.game_start.serialize(writer));
        if (this.has_login_request)
            writer.writeMessage(9, this.login_request, () => this.login_request.serialize(writer));
        if (this.has_login_info)
            writer.writeMessage(10, this.login_info, () => this.login_info.serialize(writer));
        if (this.has_login_response)
            writer.writeMessage(11, this.login_response, () => this.login_response.serialize(writer));
        if (this.has_clear_desk)
            writer.writeMessage(12, this.clear_desk, () => this.clear_desk.serialize(writer));
        if (this.has_results)
            writer.writeMessage(13, this.results, () => this.results.serialize(writer));
        if (this.has_user_list)
            writer.writeMessage(14, this.user_list, () => this.user_list.serialize(writer));
        if (this.has_king_selection)
            writer.writeMessage(15, this.king_selection, () => this.king_selection.serialize(writer));
        if (this.has_start_predictions)
            writer.writeMessage(16, this.start_predictions, () => this.start_predictions.serialize(writer));
        if (this.has_predictions)
            writer.writeMessage(17, this.predictions, () => this.predictions.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.player_id = reader.readString();
                    break;
                case 3:
                    message.game_id = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.connection, () => message.connection = Connection.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.licitiranje, () => message.licitiranje = Licitiranje.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.card, () => message.card = Card.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.licitiranje_start, () => message.licitiranje_start = LicitiranjeStart.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.game_start, () => message.game_start = GameStart.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.login_request, () => message.login_request = LoginRequest.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.login_info, () => message.login_info = LoginInfo.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.login_response, () => message.login_response = LoginResponse.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.clear_desk, () => message.clear_desk = ClearDesk.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.results, () => message.results = Results.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.user_list, () => message.user_list = UserList.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.king_selection, () => message.king_selection = KingSelection.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.start_predictions, () => message.start_predictions = StartPredictions.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.predictions, () => message.predictions = Predictions.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
